{"version":3,"sources":["useForm.js","Data.js","FormValidation.js","AreaOfStudyComponent.js","DisplayFinalInput.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","callback","validate","useState","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","checkedItems","setCheckedItems","isFinalDisplayVisible","setIsFinalDisplayVisible","useEffect","console","log","Object","keys","length","forEach","k","valuesObj","handleChange","event","target","name","value","handleSubmit","preventDefault","handleCheckboxChange","checked","clearForm","data","key","label","schedule","startDate","Date","endDate","validateIdentity","validateAreaOfStudy","validateStudyScheduleErrors","validateStudySchedule","validateDates","dates","email","test","birthday","areasOfStudy","result","study","push","schedules","map","item","datesList","res","a","moment","format","checkOverlappingDates","checkedItemsKeys","allAreFalse","every","sort","dates1","dates2","localeCompare","i","AreaOfStudyComponent","className","type","onChange","id","disabled","itemName","undefined","document","querySelectorAll","node","DisplayFinalInput","selectedAreas","onClick","Form","isSubmitted","setIsSubmitted","onSubmit","noValidate","placeholder","required","max","toISOString","split","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.05fbb3e2.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useForm = (callback, validate) => {\n    const [values, setValues] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [checkedItems, setCheckedItems] = useState({});\n    const [isFinalDisplayVisible, setIsFinalDisplayVisible] = useState(true);\n\n    /**\n     * Call function callback once all errors are resolved and submit button is clicked\n     */\n    useEffect(() => {\n        console.log(errors);\n        if (Object.keys(errors).length === 0 && isSubmitting) {\n            setIsFinalDisplayVisible(true);\n            callback();\n        }\n    }, [errors]);\n\n    /**\n     * Remove radio button data is checkbox is un-selected\n     */\n    useEffect(() => {\n        if (checkedItems) {\n            let checkedKeys = Object.keys(checkedItems);\n            checkedKeys.forEach((k) => {\n                if (checkedItems[k] === false) {\n                    let valuesObj = values;\n                    delete valuesObj[k];\n                    setValues(valuesObj);\n                }\n            });\n        }\n    }, [checkedItems]);\n\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        setErrors(validate(values, checkedItems));\n        setIsSubmitting(true);\n    };\n\n    const handleChange = (event) => {\n        setValues((values) => ({ ...values, [event.target.name]: event.target.value }));\n    };\n\n    /**\n     * Function to handle checkbox change\n     * @param event \n     */\n    const handleCheckboxChange = (event) => {\n        setCheckedItems({ ...checkedItems, [event.target.name]: event.target.checked });\n    };\n\n    const clearForm = () => {\n        setCheckedItems({});\n        setValues({});\n        setIsFinalDisplayVisible(false);\n    };\n\n    return {\n        handleChange,\n        handleSubmit,\n        handleCheckboxChange,\n        clearForm,\n        isFinalDisplayVisible,\n        values,\n        errors,\n        checkedItems,\n    };\n};\n\nexport default useForm;\n","export const data = [\n    {\n        name: 'sports',\n        key: 'checkBox1',\n        label: 'Sports',\n        schedule: [\n            {\n                startDate: new Date('2020/07/23'),\n                endDate: new Date('2020/08/23'),\n                label: 'July 23 - August 23',\n            },\n            {\n                startDate: new Date('2020/08/26'),\n                endDate: new Date('2020/09/26'),\n                label: 'August 26 - September 26',\n            },\n        ],\n    },\n    {\n        name: 'music',\n        key: 'checkBox2',\n        label: 'Music',\n        schedule: [\n            {\n                startDate: new Date('2020/06/09'),\n                endDate: new Date('2020/07/09'),\n                label: 'June 9 - July 9',\n            },\n            {\n                startDate: new Date('2020/08/09'),\n                endDate: new Date('2020/09/09'),\n                label: 'August 9 - September 9',\n            },\n        ],\n    },\n    {\n        name: 'art',\n        key: 'checkBox3',\n        label: 'Art',\n        schedule: [\n            {\n                startDate: new Date('2020/05/10'),\n                endDate: new Date('2020/06/10'),\n                label: 'May 10 - June 10',\n            },\n            {\n                startDate: new Date('2020/07/11'),\n                endDate: new Date('2020/08/11'),\n                label: 'July 11 - August 11',\n            },\n        ],\n    },\n    {\n        name: 'literature',\n        key: 'checkBox4',\n        label: 'Literature',\n        schedule: [\n            {\n                startDate: new Date('2020/07/11'),\n                endDate: new Date('2020/10/11'),\n                label: 'July 11 - October 11',\n            },\n        ],\n    },\n];\n","import * as moment from 'moment';\n\nimport { data } from './Data';\n\n/**\n * Function to validate all form fields\n *\n * @param {*} values All form values except checkbox date\n * @param {*} checkedItems Checkbox data or Areas of study checked\n */\nexport default function validate(values, checkedItems) {\n    let errors = {};\n\n    errors = {...errors, ...validateIdentity(values)};\n\n    errors = {...errors,  ...validateAreaOfStudy(checkedItems)};\n\n    // Display error message if class schedule for that area of study is not selected\n    let validateStudyScheduleErrors = validateStudySchedule(checkedItems, values);\n\n    errors = {...errors, ...validateStudyScheduleErrors};\n\n    const isOverlap = validateDates(Object.keys(checkedItems), values);\n\n    if (isOverlap) {\n        errors.dates = 'Class schedules overlap, please select different schedule';\n    }\n\n    return errors;\n}\n\n/**\n * Validate Name, Email and Birthday inputs in form\n *\n * @param values Form data\n */\nconst validateIdentity = (values) => {\n    let errors = {};\n\n    if (!values.email) {\n        errors.email = 'Email address is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n        errors.email = 'Email address is invalid';\n    }\n    if (!values.name) {\n        errors.name = 'Name is required';\n    } else if (values.name.length < 3) {\n        errors.name = 'Name must be 3 or more characters';\n    }\n    if (!values.birthday) {\n        errors.birthday = 'Birthday is required';\n    }\n\n    return errors;\n}\n\n/**\n * Check if dates are valid and if they overlap\n *\n * @param areasOfStudy Areas of Study selected\n * @param values Form values\n */\nconst validateDates = (areasOfStudy, values) => {\n    const result = [];\n\n    // get the corresponding date for the area of study\n    areasOfStudy.forEach((study) => {\n        result.push(values[study]);\n    });\n\n    let schedules = data.map((item) => item.schedule);\n\n    let datesList = [];\n\n    result.forEach((res) => {\n        schedules.forEach((item) => {\n            item.forEach((a) => {\n                if (res === a.label) {\n                    datesList.push(\n                        [\n                            moment(a.startDate).format('YYYY-MM-DD'),\n                            moment(a.endDate).format('YYYY-MM-DD')\n                        ]\n                    );\n                }\n            });\n        });\n    });\n\n    return checkOverlappingDates(datesList);\n};\n\n/**\n * Function to validate area of study\n * @param checkedItems Selected Checkbox data\n */\nconst validateAreaOfStudy = (checkedItems) => {\n    let errors = {};\n\n    const checkedItemsKeys = Object.keys(checkedItems);\n\n    // check if none of the areas of study is selected\n    const allAreFalse = Object.keys(checkedItems).every((k) => !checkedItems[k]);\n\n    // Display error message if none of the areas of study is selected\n    if (!checkedItemsKeys.length || allAreFalse) {\n        errors.study = 'You must select at least one area of study';\n    }\n    return errors;\n}\n\n/**\n * Function to validate class schedule\n * @param checkedItems \n * @param values \n */\nconst validateStudySchedule = (checkedItems, values) => {\n    const checkedItemsKeys = Object.keys(checkedItems);\n\n    let errors = {};\n\n    checkedItemsKeys.forEach((item) => {\n        if (checkedItems[item] && !values[item]) {\n            errors[`${item}`] = 'Please select one class schedule';\n        }\n    });\n\n    return errors;\n}\n\n/**\n * Function to check if the dates for the class schedule overlap\n * @param datesList List of start and end dates for each course schedule\n */\nconst checkOverlappingDates = (datesList) => {\n    if (datesList.length === 1) return false;\n\n    // sort the list first\n    datesList.sort((dates1, dates2) => dates1[0].localeCompare(dates2[0]));\n\n    // check if the current end date is greater than the next start date\n    for (let i = 0; i < datesList.length - 1; i++) {\n        const currentEndDate = datesList[i][1];\n        const nextStartDate = datesList[i + 1][0];\n\n        if (currentEndDate > nextStartDate) {\n            return true;\n        }\n    }\n\n    return false;\n};\n","import React from 'react';\nimport { data } from './Data';\nimport 'bulma/css/bulma.css';\n\nconst AreaOfStudyComponent = ({ handleChange, handleCheckboxChange, checkedItems, errors }) => {\n\n    /**\n     * Clear radio button if checkbox/ area of study is un-checked\n     * @param @type string itemName The area of study\n     */\n    const clearRadioBtn = (itemName) => {\n        if (checkedItems[itemName] === undefined || checkedItems[itemName] === false) {\n            const nodes = document.querySelectorAll(`[id=${itemName}]`);\n            nodes.forEach((node) => {\n                node.checked = false;\n            });\n        }\n    };\n\n    return (\n        <div>\n            <div className='field'>\n                <label className='has-text-weight-semibold'>Area of study</label>\n                <div className='control pl-5'>\n                    {data.map((item) => (\n                        <div className='pb-5' key={item.key}>\n                            <label className='checkbox'>\n                                <input type='checkbox' checked={checkedItems[item.name] || false} name={item.name} onChange={handleCheckboxChange} />\n                                <i className='px-2'>{item.label}</i>\n                            </label>\n                            <div className='pl-5'>\n                                {item.schedule.map((study) => (\n                                    <span key={study.label}>\n                                        <label className='radio'>\n                                            <input\n                                                type='radio'\n                                                id={item.name}\n                                                name={item.name}\n                                                value={study.label || ''}\n                                                disabled={checkedItems[item.name] ? false : true}\n                                                onChange={handleChange}\n                                                checked={clearRadioBtn(item.name)}\n                                            />\n                                            <span className='px-2'>{study.label}</span>\n                                        </label>\n                                    </span>\n                                ))}\n                            </div>\n                            {errors[`${item.name}`] && <p className='help is-danger'>{errors[`${item.name}`]}</p>}\n                        </div>\n                    ))}\n                    <div className='pb-2'>{errors.study && <p className='help is-danger'>{errors.study}</p>}</div>\n                    <div className='pb-2'>{errors.dates && <p className='help is-danger'>{errors.dates}</p>}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AreaOfStudyComponent;\n","import React from 'react';\n\n/**\n * Component to display final data for submission\n * \n */\nconst DisplayFinalInput = ({ values, checkedItems, clearForm, isFinalDisplayVisible }) => {\n    const selectedAreas = Object.keys(checkedItems);\n\n    return (\n        <>\n            {isFinalDisplayVisible && (\n                <div className='section is-fullheight'>\n                    <div className='container'>\n                        <div className='column is-8 is-offset-2'>\n                            <div className='box has-background-primary-light'>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Name:</span> {values.name}\n                                </div>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Email:</span> {values.email}\n                                </div>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Birthday:</span> {values.birthday}\n                                </div>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Area of study:</span>\n                                    <div className='pl-5'>\n                                        {selectedAreas.map((i) => (\n                                            <span key={i}>\n                                                {values[i] && (\n                                                    <div>\n                                                        <i className='is-capitalized'>{i}</i>: {values[i]}\n                                                    </div>\n                                                )}\n                                            </span>\n                                        ))}\n                                    </div>\n                                </div>\n                                {/* Clear form and hide this component after Submit button is clicked */}\n                                <button onClick={clearForm} className='button is-block is-info'>\n                                    Submit\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default DisplayFinalInput;\n","import React, { useState } from 'react';\nimport useForm from './useForm';\nimport validate from './FormValidation';\nimport 'bulma/css/bulma.css';\nimport AreaOfStudyComponent from './AreaOfStudyComponent';\n\nimport DisplayFinalInput from './DisplayFinalInput';\n\nconst Form = () => {\n    const { values, errors, checkedItems, handleChange, handleSubmit, handleCheckboxChange, clearForm, isFinalDisplayVisible } = useForm(register, validate);\n\n    const [isSubmitted, setIsSubmitted] = useState(false);\n\n    /**\n     * Callback function called when form has no errors\n     */\n    function register() {\n        console.log('bm', isSubmitted);\n        setIsSubmitted(true);\n    }\n\n    console.log('subm', isSubmitted);\n\n    return (\n        <div className='section is-fullheight'>\n            <div className='container'>\n                <div className='column is-8 is-offset-2'>\n                    <div className='has-text-centered is-size-2'>Class Registration Form</div>\n                    <div className='box has-background-link-light'>\n                        <form onSubmit={handleSubmit} noValidate>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Name</label>\n                                <div className='control has-icons-left'>\n                                    <input className={`input ${errors.name && 'is-danger'}`} type='text' placeholder='Name' value={values.name || ''} name='name' onChange={handleChange} required />\n                                    <span className='icon is-small is-left'>\n                                        <i className='fa fa-user'></i>\n                                    </span>\n                                    {errors.name && <p className='help is-danger'>{errors.name}</p>}\n                                </div>\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Email</label>\n                                <div className='control has-icons-left'>\n                                    <input\n                                        className={`input ${errors.email && 'is-danger'}`}\n                                        type='email'\n                                        placeholder='Email'\n                                        value={values.email || ''}\n                                        name='email'\n                                        onChange={handleChange}\n                                        required\n                                    />\n                                    <span className='icon is-small is-left'>\n                                        <i className='fa fa-envelope'></i>\n                                    </span>\n                                    {errors.email && <p className='help is-danger'>{errors.email}</p>}\n                                </div>\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Birthday</label>\n                                <div className='control'>\n                                    <input\n                                        max={new Date().toISOString().split('T')[0]}\n                                        className='column is-5 px-0 py-0'\n                                        type='date'\n                                        name='birthday'\n                                        placeholder='Birthday'\n                                        value={values.birthday || ''}\n                                        onChange={handleChange}\n                                    />\n                                </div>\n                                {errors.birthday && <p className='help is-danger'>{errors.birthday}</p>}\n                            </div>\n                            <AreaOfStudyComponent\n                                handleChange={handleChange}\n                                handleCheckboxChange={handleCheckboxChange}\n                                checkedItems={checkedItems}\n                                errors={errors}\n                            />\n                            <button type='submit' className='button is-block is-info'>\n                                Confirm\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            {/* Display formatted div with all form data after Confirm button is clicked */}\n            {Object.keys(errors).length === 0 && isSubmitted &&\n                <DisplayFinalInput\n                    values={values}\n                    checkedItems={checkedItems}\n                    clearForm={clearForm}\n                    isFinalDisplayVisible={isFinalDisplayVisible}\n                />}\n        </div>\n    );\n};\n\nexport default Form;\n","import React from 'react';\nimport './App.css';\nimport Form from './Form';\n\nconst App = () => {\n  return (\n    <Form />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}