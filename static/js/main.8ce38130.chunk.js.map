{"version":3,"sources":["useForm.js","Data.js","FormValidation.js","AreaOfStudyComponent.js","DisplayFinalInput.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","callback","validate","useState","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","checkedItems","setCheckedItems","isFinalDisplayVisible","setIsFinalDisplayVisible","useEffect","Object","keys","length","forEach","k","valuesObj","handleChange","event","target","name","value","handleSubmit","preventDefault","handleCheckboxChange","checked","clearForm","data","validateIdentity","validateAreaOfStudy","validateStudyScheduleErrors","validateStudySchedule","validateDates","dates","email","test","birthday","areasOfStudy","result","study","push","schedules","map","item","schedule","datesList","res","a","label","moment","Date","startDate","format","endDate","checkOverlappingDates","checkedItemsKeys","allAreFalse","every","sort","dates1","dates2","localeCompare","i","AreaOfStudyComponent","className","type","onChange","id","disabled","itemName","undefined","document","querySelectorAll","node","key","DisplayFinalInput","selectedAreas","getCourseData","s","identityObject","output","onClick","jsonOutput","getCourseDataObj","console","log","logOutput","Form","setIsSubmitted","isSubmitted","onSubmit","noValidate","placeholder","required","max","toISOString","split","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ce38130.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useForm = (callback, validate) => {\n    const [values, setValues] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [checkedItems, setCheckedItems] = useState({});\n    const [isFinalDisplayVisible, setIsFinalDisplayVisible] = useState(true);\n\n    /**\n     * Call function callback once all errors are resolved and submit button is clicked\n     */\n    useEffect(() => {\n        if (Object.keys(errors).length === 0 && isSubmitting) {\n            setIsFinalDisplayVisible(true);\n            callback();\n        }\n    }, [errors]);\n\n    /**\n     * Remove radio button data is checkbox is un-selected\n     */\n    useEffect(() => {\n        if (checkedItems) {\n            let checkedKeys = Object.keys(checkedItems);\n            checkedKeys.forEach((k) => {\n                if (checkedItems[k] === false) {\n                    let valuesObj = values;\n                    delete valuesObj[k];\n                    setValues(valuesObj);\n                }\n            });\n        }\n    }, [checkedItems]);\n\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        setErrors(validate(values, checkedItems));\n        setIsSubmitting(true);\n    };\n\n    const handleChange = (event) => {\n        setValues((values) => ({ ...values, [event.target.name]: event.target.value }));\n    };\n\n    /**\n     * Function to handle checkbox change\n     * @param event \n     */\n    const handleCheckboxChange = (event) => {\n        setCheckedItems({ ...checkedItems, [event.target.name]: event.target.checked });\n    };\n\n    const clearForm = () => {\n        setCheckedItems({});\n        setValues({});\n        setIsFinalDisplayVisible(false);\n    };\n\n    return {\n        handleChange,\n        handleSubmit,\n        handleCheckboxChange,\n        clearForm,\n        isFinalDisplayVisible,\n        values,\n        errors,\n        checkedItems,\n    };\n};\n\nexport default useForm;\n","export const data =\n    [\n       {\n          \"name\":\"sports\",\n          \"key\":\"checkBox1\",\n          \"label\":\"Sports\",\n          \"schedule\":[\n             {\n                \"startDate\":\"2020/07/23\",\n                \"endDate\":\"2020/08/23\",\n                \"label\":\"July 23 - August 23\"\n             },\n             {\n                \"startDate\":\"2020/08/26\",\n                \"endDate\":\"2020/09/26\",\n                \"label\":\"August 26 - September 26\"\n             }\n          ]\n       },\n       {\n          \"name\":\"music\",\n          \"key\":\"checkBox2\",\n          \"label\":\"Music\",\n          \"schedule\":[\n             {\n                \"startDate\":\"2020/06/09\",\n                \"endDate\":\"2020/07/09\",\n                \"label\":\"June 9 - July 9\"\n             },\n             {\n                \"startDate\":\"2020/08/09\",\n                \"endDate\":\"2020/09/09\",\n                \"label\":\"August 9 - September 9\"\n             }\n          ]\n       },\n       {\n          \"name\":\"art\",\n          \"key\":\"checkBox3\",\n          \"label\":\"Art\",\n          \"schedule\":[\n             {\n                \"startDate\":\"2020/05/10\",\n                \"endDate\":\"2020/06/10\",\n                \"label\":\"May 10 - June 10\"\n             },\n             {\n                \"startDate\":\"2020/07/11\",\n                \"endDate\":\"2020/08/11\",\n                \"label\":\"July 11 - August 11\"\n             }\n          ]\n       },\n       {\n          \"name\":\"literature\",\n          \"key\":\"checkBox4\",\n          \"label\":\"Literature\",\n          \"schedule\":[\n             {\n                \"startDate\":\"2020/07/11\",\n                \"endDate\":\"2020/10/11\",\n                \"label\":\"July 11 - October 11\"\n             }\n          ]\n       }\n    ];\n","import * as moment from 'moment';\n\nimport { data } from './Data';\n\n/**\n * Function to validate all form fields\n *\n * @param {*} values All form values except checkbox date\n * @param {*} checkedItems Checkbox data or Areas of study checked\n */\nexport default function validate(values, checkedItems) {\n    let errors = {};\n\n    errors = {...errors, ...validateIdentity(values)};\n\n    errors = {...errors,  ...validateAreaOfStudy(checkedItems)};\n\n    // Display error message if class schedule for that area of study is not selected\n    let validateStudyScheduleErrors = validateStudySchedule(checkedItems, values);\n\n    errors = {...errors, ...validateStudyScheduleErrors};\n\n    const isOverlap = validateDates(Object.keys(checkedItems), values);\n\n    if (isOverlap) {\n        errors.dates = 'Class schedules overlap, please select different schedule';\n    }\n\n    return errors;\n}\n\n/**\n * Validate Name, Email and Birthday inputs in form\n *\n * @param values Form data\n */\nconst validateIdentity = (values) => {\n    let errors = {};\n\n    if (!values.email) {\n        errors.email = 'Email address is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n        errors.email = 'Email address is invalid';\n    }\n    if (!values.name) {\n        errors.name = 'Name is required';\n    } else if (values.name.length < 3) {\n        errors.name = 'Name must be 3 or more characters';\n    }\n    if (!values.birthday) {\n        errors.birthday = 'Birthday is required';\n    }\n\n    return errors;\n}\n\n/**\n * Check if dates are valid and if they overlap\n *\n * @param areasOfStudy Areas of Study selected\n * @param values Form values\n */\nconst validateDates = (areasOfStudy, values) => {\n    const result = [];\n\n    // get the corresponding date for the area of study\n    areasOfStudy.forEach((study) => {\n        result.push(values[study]);\n    });\n\n    let schedules = data.map((item) => item.schedule);\n\n    let datesList = [];\n\n    result.forEach((res) => {\n        schedules.forEach((item) => {\n            item.forEach((a) => {\n                if (res === a.label) {\n                    datesList.push(\n                        [\n                            moment(new Date(a.startDate)).format('YYYY-MM-DD'),\n                            moment(new Date(a.endDate)).format('YYYY-MM-DD')\n                        ]\n                    );\n                }\n            });\n        });\n    });\n\n    return checkOverlappingDates(datesList);\n};\n\n/**\n * Function to validate area of study\n * @param checkedItems Selected Checkbox data\n */\nconst validateAreaOfStudy = (checkedItems) => {\n    let errors = {};\n\n    const checkedItemsKeys = Object.keys(checkedItems);\n\n    // check if none of the areas of study is selected\n    const allAreFalse = Object.keys(checkedItems).every((k) => !checkedItems[k]);\n\n    // Display error message if none of the areas of study is selected\n    if (!checkedItemsKeys.length || allAreFalse) {\n        errors.study = 'You must select at least one area of study';\n    }\n    return errors;\n}\n\n/**\n * Function to validate class schedule\n * @param checkedItems \n * @param values \n */\nconst validateStudySchedule = (checkedItems, values) => {\n    const checkedItemsKeys = Object.keys(checkedItems);\n\n    let errors = {};\n\n    checkedItemsKeys.forEach((item) => {\n        if (checkedItems[item] && !values[item]) {\n            errors[`${item}`] = 'Please select one class schedule';\n        }\n    });\n\n    return errors;\n}\n\n/**\n * Function to check if the dates for the class schedule overlap\n * @param datesList List of start and end dates for each course schedule\n */\nconst checkOverlappingDates = (datesList) => {\n    if (datesList.length === 1) return false;\n\n    // sort the list first\n    datesList.sort((dates1, dates2) => dates1[0].localeCompare(dates2[0]));\n\n    // check if the current end date is greater than the next start date\n    for (let i = 0; i < datesList.length - 1; i++) {\n        const currentEndDate = datesList[i][1];\n        const nextStartDate = datesList[i + 1][0];\n\n        if (currentEndDate > nextStartDate) {\n            return true;\n        }\n    }\n\n    return false;\n};\n","import React from 'react';\nimport { data } from './Data';\nimport 'bulma/css/bulma.css';\n\nconst AreaOfStudyComponent = ({ handleChange, handleCheckboxChange, checkedItems, errors }) => {\n\n    /**\n     * Clear radio button if checkbox/ area of study is un-checked\n     * @param @type string itemName The area of study\n     */\n    const clearRadioBtn = (itemName) => {\n        if (checkedItems[itemName] === undefined || checkedItems[itemName] === false) {\n            const nodes = document.querySelectorAll(`[id=${itemName}]`);\n            nodes.forEach((node) => {\n                node.checked = false;\n            });\n        }\n    };\n\n    return (\n        <div>\n            <div className='field'>\n                <label className='has-text-weight-semibold'>Area of study</label>\n                <div className='control pl-5'>\n                    {data.map((item) => (\n                        <div className='pb-5' key={item.key}>\n                            <label className='checkbox'>\n                                <input type='checkbox' checked={checkedItems[item.name] || false} name={item.name} onChange={handleCheckboxChange} />\n                                <i className='px-2'>{item.label}</i>\n                            </label>\n                            <div className='pl-5'>\n                                {item.schedule.map((study) => (\n                                    <span key={study.label}>\n                                        <label className='radio'>\n                                            <input\n                                                type='radio'\n                                                id={item.name}\n                                                name={item.name}\n                                                value={study.label || ''}\n                                                disabled={checkedItems[item.name] ? false : true}\n                                                onChange={handleChange}\n                                                checked={clearRadioBtn(item.name)}\n                                            />\n                                            <span className='px-2'>{study.label}</span>\n                                        </label>\n                                    </span>\n                                ))}\n                            </div>\n                            {errors[`${item.name}`] && <p className='help is-danger'>{errors[`${item.name}`]}</p>}\n                        </div>\n                    ))}\n                    <div className='pb-2'>{errors.study && <p className='help is-danger'>{errors.study}</p>}</div>\n                    <div className='pb-2'>{errors.dates && <p className='help is-danger'>{errors.dates}</p>}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AreaOfStudyComponent;\n","import React from 'react';\n\n/**\n * Component to display final data for submission\n * \n */\nconst DisplayFinalInput = ({ values, checkedItems, clearForm, isFinalDisplayVisible }) => {\n    const selectedAreas = Object.keys(checkedItems);\n    \n    const getCourseData = () => {\n        let res = {};\n        selectedAreas.forEach((s) => {\n            if (values[s]) {\n                res[s] = values[s];\n            }\n        });\n        return res;\n    };\n\n    const identityObject = {\n        \"name\": `${values.name}`,\n        \"email\": `${values.email}`,\n        \"birthday\": `${values.birthday}`\n    }\n\n    const output = {\n        ...identityObject,\n        ...getCourseData()\n    };\n\n    // Logs the json object to the console.\n    const logOutput = () => {\n        let jsonOutput = {};\n        let res = [];\n        let getCourseDataObj = getCourseData();\n        Object.keys(getCourseDataObj).forEach(item => {\n            res.push({ [item] : getCourseDataObj[item] });\n        });\n\n        jsonOutput = {\n            ...identityObject,\n            \"schedule\": [\n                ...res\n            ]\n        };\n        console.log('logOutput', jsonOutput);\n    };\n\n    return (\n        <>\n            {isFinalDisplayVisible && (\n                <div className='section is-fullheight'>\n                    <div className='container'>\n                        <div className='column is-8 is-offset-2'>\n                            <div className='box has-background-primary-light'>\n                                {Object.keys(output).map((item) => (\n                                    <span key={item}>\n                                        <div className='py-2'>\n                                            <span className='has-text-weight-semibold is-capitalized'>{item}</span>\n                                            {' '}\n                                            {output[item]}\n                                        </div>\n                                    </span>\n                                ))}\n                                {/* Clear form and hide this component after Submit button is clicked */}\n                                <button onClick={() => { clearForm(); logOutput(); }} className='button is-block is-info'>\n                                    Submit\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default DisplayFinalInput;\n","import React, { useState } from 'react';\nimport useForm from './useForm';\nimport validate from './FormValidation';\nimport 'bulma/css/bulma.css';\nimport AreaOfStudyComponent from './AreaOfStudyComponent';\n\nimport DisplayFinalInput from './DisplayFinalInput';\n\nconst Form = () => {\n    const { values, errors, checkedItems, handleChange, handleSubmit, handleCheckboxChange, clearForm, isFinalDisplayVisible } = useForm(register, validate);\n\n    const [isSubmitted, setIsSubmitted] = useState(false);\n\n    /**\n     * Callback function called when form has no errors\n     */\n    function register() {\n        setIsSubmitted(true);\n    }\n\n    return (\n        <div className='section is-fullheight'>\n            <div className='container'>\n                <div className='column is-8 is-offset-2'>\n                    <div className='has-text-centered is-size-2'>Class Registration Form</div>\n                    <div className='box has-background-link-light'>\n                        <form onSubmit={handleSubmit} noValidate>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Name</label>\n                                <div className='control has-icons-left'>\n                                    <input className={`input ${errors.name && 'is-danger'}`} type='text' placeholder='Name' value={values.name || ''} name='name' onChange={handleChange} required />\n                                    <span className='icon is-small is-left'>\n                                        <i className='fa fa-user'></i>\n                                    </span>\n                                    {errors.name && <p className='help is-danger'>{errors.name}</p>}\n                                </div>\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Email</label>\n                                <div className='control has-icons-left'>\n                                    <input\n                                        className={`input ${errors.email && 'is-danger'}`}\n                                        type='email'\n                                        placeholder='Email'\n                                        value={values.email || ''}\n                                        name='email'\n                                        onChange={handleChange}\n                                        required\n                                    />\n                                    <span className='icon is-small is-left'>\n                                        <i className='fa fa-envelope'></i>\n                                    </span>\n                                    {errors.email && <p className='help is-danger'>{errors.email}</p>}\n                                </div>\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Birthday</label>\n                                <div className='control'>\n                                    <input\n                                        max={new Date().toISOString().split('T')[0]}\n                                        className='column is-5 px-0 py-0'\n                                        type='date'\n                                        name='birthday'\n                                        placeholder='Birthday'\n                                        value={values.birthday || ''}\n                                        onChange={handleChange}\n                                    />\n                                </div>\n                                {errors.birthday && <p className='help is-danger'>{errors.birthday}</p>}\n                            </div>\n                            <AreaOfStudyComponent\n                                handleChange={handleChange}\n                                handleCheckboxChange={handleCheckboxChange}\n                                checkedItems={checkedItems}\n                                errors={errors}\n                            />\n                            <button type='submit' className='button is-block is-info'>\n                                Confirm\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            {/* Display formatted div with all form data after Confirm button is clicked */}\n            {Object.keys(errors).length === 0 && isSubmitted &&\n                <DisplayFinalInput\n                    values={values}\n                    checkedItems={checkedItems}\n                    clearForm={clearForm}\n                    isFinalDisplayVisible={isFinalDisplayVisible}\n                />}\n        </div>\n    );\n};\n\nexport default Form;\n","import React from 'react';\nimport './App.css';\nimport Form from './Form';\n\nconst App = () => {\n  return (\n    <Form />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}