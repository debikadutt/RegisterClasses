{"version":3,"sources":["useForm.js","Data.js","FormValidation.js","DisplayFinalInput.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","callback","validate","useState","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","checkedItems","setCheckedItems","isFinalDisplayVisible","setIsFinalDisplayVisible","useEffect","Object","keys","length","forEach","k","valuesObj","handleChange","event","target","name","value","handleSubmit","preventDefault","handleCheckboxChange","checked","clearForm","checkboxes","key","label","schedule","startDate","Date","endDate","email","test","birthday","checkedItemsKeys","allAreFalse","every","study","item","validateDates","dates","areasOfStudy","result","push","schedules","map","datesList","res","a","moment","format","checkOverlappingDates","sort","dates1","dates2","localeCompare","i","DisplayFinalInput","selectedAreas","className","onClick","Form","setIsSubmitted","isSubmitted","onSubmit","noValidate","type","placeholder","onChange","required","max","toISOString","split","id","disabled","itemName","undefined","document","querySelectorAll","node","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0df5aff0.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useForm = (callback, validate) => {\n    const [values, setValues] = useState({});\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [checkedItems, setCheckedItems] = useState({});\n    const [isFinalDisplayVisible, setIsFinalDisplayVisible] = useState(true);\n\n    useEffect(() => {\n        if (Object.keys(errors).length === 0 && isSubmitting) {\n            setIsFinalDisplayVisible(true);\n            callback();\n        }\n    }, [errors]);\n\n    useEffect(() => {\n        if (checkedItems) {\n            let checkedKeys = Object.keys(checkedItems);\n            checkedKeys.forEach((k) => {\n                if (checkedItems[k] === false) {\n                    let valuesObj = values;\n                    delete valuesObj[k];\n                    setValues(valuesObj);\n                }\n            });\n        }\n    }, [checkedItems]);\n\n    const handleSubmit = (event) => {\n        if (event) event.preventDefault();\n        setErrors(validate(values, checkedItems));\n        setIsSubmitting(true);\n    };\n\n    const handleChange = (event) => {\n        setValues((values) => ({ ...values, [event.target.name]: event.target.value }));\n    };\n\n    const handleCheckboxChange = (event) => {\n        setCheckedItems({ ...checkedItems, [event.target.name]: event.target.checked });\n    };\n\n    const clearForm = () => {\n        setCheckedItems({});\n        setValues({});\n        setIsFinalDisplayVisible(false);\n    };\n\n    return {\n        handleChange,\n        handleSubmit,\n        handleCheckboxChange,\n        clearForm,\n        isFinalDisplayVisible,\n        values,\n        errors,\n        checkedItems,\n    };\n};\n\nexport default useForm;\n","export const checkboxes = [\n    {\n        name: 'sports',\n        key: 'checkBox1',\n        label: 'Sports',\n        schedule: [\n            {\n                startDate: new Date('2020/07/23'),\n                endDate: new Date('2020/08/23'),\n                label: 'July 23 - August 23',\n            },\n            {\n                startDate: new Date('2020/08/26'),\n                endDate: new Date('2020/09/26'),\n                label: 'August 26 - September 26',\n            },\n        ],\n    },\n    {\n        name: 'music',\n        key: 'checkBox2',\n        label: 'Music',\n        schedule: [\n            {\n                startDate: new Date('2020/06/09'),\n                endDate: new Date('2020/07/09'),\n                label: 'June 9 - July 9',\n            },\n            {\n                startDate: new Date('2020/08/09'),\n                endDate: new Date('2020/09/09'),\n                label: 'August 9 - September 9',\n            },\n        ],\n    },\n    {\n        name: 'art',\n        key: 'checkBox3',\n        label: 'Art',\n        schedule: [\n            {\n                startDate: new Date('2020/05/10'),\n                endDate: new Date('2020/06/10'),\n                label: 'May 10 - June 10',\n            },\n            {\n                startDate: new Date('2020/07/11'),\n                endDate: new Date('2020/08/11'),\n                label: 'July 11 - August 11',\n            },\n        ],\n    },\n    {\n        name: 'literature',\n        key: 'checkBox4',\n        label: 'Literature',\n        schedule: [\n            {\n                startDate: new Date('2020/07/11'),\n                endDate: new Date('2020/10/11'),\n                label: 'July 11 - October 11',\n            },\n        ],\n    },\n];\n","// const areasOfStudy = ['sports', 'music', 'art', 'literature'];\nimport * as moment from 'moment';\n\nimport { checkboxes } from './Data';\n\nexport default function validate(values, checkedItems) {\n    let errors = {};\n    if (!values.email) {\n        errors.email = 'Email address is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n        errors.email = 'Email address is invalid';\n    }\n    if (!values.name) {\n        errors.name = 'Name is required';\n    } else if (values.name.length < 3) {\n        errors.name = 'Name must be 3 or more characters';\n    }\n    if (!values.birthday) {\n        errors.birthday = 'Birthday is required';\n    }\n\n    let checkedItemsKeys = Object.keys(checkedItems);\n\n    let allAreFalse = Object.keys(checkedItems).every((k) => !checkedItems[k]);\n\n    if (!checkedItemsKeys.length || allAreFalse) {\n        errors.study = 'You must select at least one area of study';\n    }\n\n    checkedItemsKeys.forEach((item) => {\n        if (checkedItems[item] && !values[item]) {\n            errors[`${item}`] = 'Please select one class schedule';\n        }\n    });\n\n    const isOverlap = validateDates(checkedItemsKeys, values);\n\n    if (isOverlap) {\n        errors.dates = 'Class schedules overlap, please select different schedule';\n    }\n\n    return errors;\n}\n\nconst validateDates = (areasOfStudy, values) => {\n    const result = [];\n\n    areasOfStudy.forEach((study) => {\n        result.push(values[study]);\n    });\n\n    let schedules = checkboxes.map((item) => item.schedule);\n\n    let datesList = [];\n\n    result.forEach((res) => {\n        schedules.forEach((item) => {\n            item.forEach((a) => {\n                if (res === a.label) {\n                    datesList.push([moment(a.startDate).format('YYYY-MM-DD'), moment(a.endDate).format('YYYY-MM-DD')]);\n                }\n            });\n        });\n    });\n\n    return checkOverlappingDates(datesList);\n};\n\nconst checkOverlappingDates = (datesList) => {\n    if (datesList.length === 1) return false;\n\n    datesList.sort((dates1, dates2) => dates1[0].localeCompare(dates2[0]));\n\n    for (let i = 0; i < datesList.length - 1; i++) {\n        const currentEndTime = datesList[i][1];\n        const nextStartTime = datesList[i + 1][0];\n\n        if (currentEndTime > nextStartTime) {\n            return true;\n        }\n    }\n\n    return false;\n};\n","import React from 'react';\n\nconst DisplayFinalInput = ({ values, checkedItems, clearForm, isFinalDisplayVisible }) => {\n    let selectedAreas = Object.keys(checkedItems);\n\n    return (\n        <>\n            {isFinalDisplayVisible && (\n                <div className='section is-fullheight'>\n                    <div className='container'>\n                        <div className='column is-8 is-offset-2'>\n                            <div className='box has-background-primary-light'>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Name:</span> {values.name}\n                                </div>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Email:</span> {values.email}\n                                </div>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Birthday:</span> {values.birthday}\n                                </div>\n                                <div className='py-2'>\n                                    <span className='has-text-weight-semibold'>Area of study:</span>\n                                    <div className='pl-5'>\n                                        {selectedAreas.map((i) => (\n                                            <span key={i}>\n                                                {values[i] && (\n                                                    <div>\n                                                        <i className='is-capitalized'>{i}</i>: {values[i]}\n                                                    </div>\n                                                )}\n                                            </span>\n                                        ))}\n                                    </div>\n                                </div>\n                                <button onClick={clearForm} className='button is-block is-info'>\n                                    Submit\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default DisplayFinalInput;\n","import React, { useState } from 'react';\nimport useForm from './useForm';\nimport validate from './FormValidation';\nimport 'bulma/css/bulma.css';\nimport { checkboxes } from './Data';\nimport DisplayFinalInput from './DisplayFinalInput';\n\nconst Form = () => {\n    const { values, errors, checkedItems, handleChange, handleSubmit, handleCheckboxChange, clearForm, isFinalDisplayVisible } = useForm(register, validate);\n\n    const [isSubmitted, setIsSubmitted] = useState(false);\n\n    function register() {\n        setIsSubmitted(true);\n    }\n\n    const clearIfFalse = (itemName) => {\n        if (checkedItems[itemName] === undefined || checkedItems[itemName] === false) {\n            const nodes = document.querySelectorAll(`[id=${itemName}]`);\n            nodes.forEach((node) => {\n                node.checked = false;\n            });\n        }\n    };\n\n    return (\n        <div className='section is-fullheight'>\n            <div className='container'>\n                <div className='column is-8 is-offset-2'>\n                    <div className='has-text-centered is-size-2'>Class Registration Form</div>\n                    <div className='box has-background-link-light'>\n                        <form onSubmit={handleSubmit} noValidate>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Name</label>\n                                <div className='control has-icons-left'>\n                                    <input className={`input ${errors.name && 'is-danger'}`} type='text' placeholder='Name' value={values.name || ''} name='name' onChange={handleChange} required />\n                                    <span className='icon is-small is-left'>\n                                        <i className='fa fa-user'></i>\n                                    </span>\n                                    {errors.name && <p className='help is-danger'>{errors.name}</p>}\n                                </div>\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Email</label>\n                                <div className='control has-icons-left'>\n                                    <input\n                                        className={`input ${errors.email && 'is-danger'}`}\n                                        type='email'\n                                        placeholder='Email'\n                                        value={values.email || ''}\n                                        name='email'\n                                        onChange={handleChange}\n                                        required\n                                    />\n                                    <span className='icon is-small is-left'>\n                                        <i className='fa fa-envelope'></i>\n                                    </span>\n                                    {errors.email && <p className='help is-danger'>{errors.email}</p>}\n                                </div>\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Birthday</label>\n                                <div className='control'>\n                                    <input\n                                        max={new Date().toISOString().split('T')[0]}\n                                        className='column is-5 px-0 py-0'\n                                        type='date'\n                                        name='birthday'\n                                        placeholder='Birthday'\n                                        value={values.birthday || ''}\n                                        onChange={handleChange}\n                                    />\n                                </div>\n                                {errors.birthday && <p className='help is-danger'>{errors.birthday}</p>}\n                            </div>\n                            <div className='field'>\n                                <label className='has-text-weight-semibold'>Area of study</label>\n                                <div className='control pl-5'>\n                                    {checkboxes.map((item) => (\n                                        <div className='pb-5' key={item.key}>\n                                            <label className='checkbox'>\n                                                <input type='checkbox' checked={checkedItems[item.name] || false} name={item.name} onChange={handleCheckboxChange} />\n                                                <i className='px-2'>{item.label}</i>\n                                            </label>\n                                            <div className='pl-5'>\n                                                {item.schedule.map((study) => (\n                                                    <span key={study.label}>\n                                                        <label className='radio'>\n                                                            <input\n                                                                type='radio'\n                                                                id={item.name}\n                                                                name={item.name}\n                                                                value={study.label || ''}\n                                                                disabled={checkedItems[item.name] ? false : true}\n                                                                onChange={handleChange}\n                                                                checked={clearIfFalse(item.name)}\n                                                            />\n                                                            <span className='px-2'>{study.label}</span>\n                                                        </label>\n                                                    </span>\n                                                ))}\n                                            </div>\n                                            {errors[`${item.name}`] && <p className='help is-danger'>{errors[`${item.name}`]}</p>}\n                                        </div>\n                                    ))}\n                                    {errors.study && <p className='help is-danger'>{errors.study}</p>}\n                                    {errors.dates && <p className='help is-danger'>{errors.dates}</p>}\n                                </div>\n                            </div>\n                            <button type='submit' className='button is-block is-info'>\n                                Confirm\n                            </button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            {Object.keys(errors).length === 0 && isSubmitted && <DisplayFinalInput values={values} checkedItems={checkedItems} clearForm={clearForm} isFinalDisplayVisible={isFinalDisplayVisible} />}\n        </div>\n    );\n};\n\nexport default Form;\n","import React from 'react';\nimport './App.css';\nimport Form from './Form';\n\nconst App = () => {\n  return (\n    <Form />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}